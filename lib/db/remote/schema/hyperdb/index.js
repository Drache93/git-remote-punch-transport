// This file is autogenerated by the hyperdb compiler
/* eslint-disable camelcase */

const { IndexEncoder, c } = require('hyperdb/runtime')
const { version, getEncoding, setVersion } = require('./messages.js')

// '@punch-remote/objects' collection key
const collection0_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 0 })

function collection0_indexify (record) {
  const a = record.oid
  return a === undefined ? [] : [a]
}

// '@punch-remote/objects' value encoding
const collection0_enc = getEncoding('@punch-remote/objects/hyperdb#0')

// '@punch-remote/objects' reconstruction function
function collection0_reconstruct (version, keyBuf, valueBuf) {
  const key = collection0_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection0_enc, valueBuf)
  record.oid = key[0]
  return record
}
// '@punch-remote/objects' key reconstruction function
function collection0_reconstruct_key (keyBuf) {
  const key = collection0_key.decode(keyBuf)
  return {
    oid: key[0]
  }
}

// '@punch-remote/objects'
const collection0 = {
  name: '@punch-remote/objects',
  id: 0,
  encodeKey (record) {
    const key = [record.oid]
    return collection0_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection0_key.encodeRange({
      gt: gt ? collection0_indexify(gt) : null,
      lt: lt ? collection0_indexify(lt) : null,
      gte: gte ? collection0_indexify(gte) : null,
      lte: lte ? collection0_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    setVersion(version)
    return c.encode(collection0_enc, record)
  },
  trigger: null,
  reconstruct: collection0_reconstruct,
  reconstructKey: collection0_reconstruct_key,
  indexes: []
}

// '@punch-remote/refs' collection key
const collection1_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 1 })

function collection1_indexify (record) {
  const a = record.oid
  return a === undefined ? [] : [a]
}

// '@punch-remote/refs' value encoding
const collection1_enc = getEncoding('@punch-remote/refs/hyperdb#1')

// '@punch-remote/refs' reconstruction function
function collection1_reconstruct (version, keyBuf, valueBuf) {
  const key = collection1_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection1_enc, valueBuf)
  record.oid = key[0]
  return record
}
// '@punch-remote/refs' key reconstruction function
function collection1_reconstruct_key (keyBuf) {
  const key = collection1_key.decode(keyBuf)
  return {
    oid: key[0]
  }
}

// '@punch-remote/refs'
const collection1 = {
  name: '@punch-remote/refs',
  id: 1,
  encodeKey (record) {
    const key = [record.oid]
    return collection1_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection1_key.encodeRange({
      gt: gt ? collection1_indexify(gt) : null,
      lt: lt ? collection1_indexify(lt) : null,
      gte: gte ? collection1_indexify(gte) : null,
      lte: lte ? collection1_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    setVersion(version)
    return c.encode(collection1_enc, record)
  },
  trigger: null,
  reconstruct: collection1_reconstruct,
  reconstructKey: collection1_reconstruct_key,
  indexes: []
}

// '@punch-remote/config' collection key
const collection2_key = new IndexEncoder([
  IndexEncoder.BUFFER
], { prefix: 2 })

function collection2_indexify (record) {
  const a = record.blobsKey
  return a === undefined ? [] : [a]
}

// '@punch-remote/config' value encoding
const collection2_enc = getEncoding('@punch-remote/config/hyperdb#2')

// '@punch-remote/config' reconstruction function
function collection2_reconstruct (version, keyBuf, valueBuf) {
  const key = collection2_key.decode(keyBuf)
  setVersion(version)
  const record = c.decode(collection2_enc, valueBuf)
  record.blobsKey = key[0]
  return record
}
// '@punch-remote/config' key reconstruction function
function collection2_reconstruct_key (keyBuf) {
  const key = collection2_key.decode(keyBuf)
  return {
    blobsKey: key[0]
  }
}

// '@punch-remote/config'
const collection2 = {
  name: '@punch-remote/config',
  id: 2,
  encodeKey (record) {
    const key = [record.blobsKey]
    return collection2_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection2_key.encodeRange({
      gt: gt ? collection2_indexify(gt) : null,
      lt: lt ? collection2_indexify(lt) : null,
      gte: gte ? collection2_indexify(gte) : null,
      lte: lte ? collection2_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    setVersion(version)
    return c.encode(collection2_enc, record)
  },
  trigger: null,
  reconstruct: collection2_reconstruct,
  reconstructKey: collection2_reconstruct_key,
  indexes: []
}

// '@punch-remote/refs-by-name' collection key
const index3_key = new IndexEncoder([
  IndexEncoder.STRING,
  IndexEncoder.STRING
], { prefix: 3 })

function index3_indexify (record) {
  const arr = []

  const a0 = record.name
  if (a0 === undefined) return arr
  arr.push(a0)

  const a1 = record.oid
  if (a1 === undefined) return arr
  arr.push(a1)

  return arr
}

// '@punch-remote/refs-by-name'
const index3 = {
  name: '@punch-remote/refs-by-name',
  id: 3,
  encodeKey (record) {
    return index3_key.encode(index3_indexify(record))
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return index3_key.encodeRange({
      gt: gt ? index3_indexify(gt) : null,
      lt: lt ? index3_indexify(lt) : null,
      gte: gte ? index3_indexify(gte) : null,
      lte: lte ? index3_indexify(lte) : null
    })
  },
  encodeValue: (doc) => index3.collection.encodeKey(doc),
  encodeIndexKeys (record, context) {
    return [index3_key.encode([record.name, record.oid])]
  },
  reconstruct: (keyBuf, valueBuf) => valueBuf,
  offset: collection1.indexes.length,
  collection: collection1
}
collection1.indexes.push(index3)

// '@punch-remote/objects-by-refOid' collection key
const index4_key = new IndexEncoder([
  IndexEncoder.STRING,
  IndexEncoder.STRING
], { prefix: 4 })

function index4_indexify (record) {
  const arr = []

  const a0 = record.refOid
  if (a0 === undefined) return arr
  arr.push(a0)

  const a1 = record.oid
  if (a1 === undefined) return arr
  arr.push(a1)

  return arr
}

// '@punch-remote/objects-by-refOid'
const index4 = {
  name: '@punch-remote/objects-by-refOid',
  id: 4,
  encodeKey (record) {
    return index4_key.encode(index4_indexify(record))
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return index4_key.encodeRange({
      gt: gt ? index4_indexify(gt) : null,
      lt: lt ? index4_indexify(lt) : null,
      gte: gte ? index4_indexify(gte) : null,
      lte: lte ? index4_indexify(lte) : null
    })
  },
  encodeValue: (doc) => index4.collection.encodeKey(doc),
  encodeIndexKeys (record, context) {
    return [index4_key.encode([record.refOid, record.oid])]
  },
  reconstruct: (keyBuf, valueBuf) => valueBuf,
  offset: collection0.indexes.length,
  collection: collection0
}
collection0.indexes.push(index4)

const collections = [
  collection0,
  collection1,
  collection2
]

const indexes = [
  index3,
  index4
]

module.exports = { version, collections, indexes, resolveCollection, resolveIndex }

function resolveCollection (name) {
  switch (name) {
    case '@punch-remote/objects': return collection0
    case '@punch-remote/refs': return collection1
    case '@punch-remote/config': return collection2
    default: return null
  }
}

function resolveIndex (name) {
  switch (name) {
    case '@punch-remote/refs-by-name': return index3
    case '@punch-remote/objects-by-refOid': return index4
    default: return null
  }
}
